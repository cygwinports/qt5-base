--- origsrc/qtbase-opensource-src-5.6.2/qmake/generators/makefile.cpp	2016-09-16 00:49:42.000000000 -0500
+++ src/qtbase-opensource-src-5.6.2/qmake/generators/makefile.cpp	2016-10-27 23:48:25.788335300 -0500
@@ -1088,6 +1088,13 @@ MakefileGenerator::prlFileName(bool fixi
         int dot = ret.indexOf('.');
         if(dot != -1)
             ret.truncate(dot);
+        if(!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            if(ret.startsWith("cyg"))
+                ret = "lib" + ret.mid(3);
+            int dash = ret.indexOf('-');
+            if(dash != -1)
+                ret.truncate(dash);
+        }
         ret += Option::prl_ext;
     }
     if(!project->isEmpty("QMAKE_BUNDLE"))
@@ -3150,11 +3157,14 @@ MakefileGenerator::pkgConfigFileName(boo
         int slsh = ret.lastIndexOf(Option::dir_sep);
         if (slsh != -1)
             ret = ret.right(ret.length() - slsh - 1);
-        if (ret.startsWith("lib"))
+        if (ret.startsWith("lib") || ret.startsWith("cyg"))
             ret = ret.mid(3);
         int dot = ret.indexOf('.');
         if (dot != -1)
             ret = ret.left(dot);
+        int dash = ret.indexOf('-');
+        if (dash != -1)
+            ret = ret.left(dash);
     }
     ret += Option::pkgcfg_ext;
     QString subdir = project->first("QMAKE_PKGCONFIG_DESTDIR").toQString();
--- origsrc/qtbase-opensource-src-5.6.2/qmake/generators/unix/unixmake.cpp	2016-09-16 00:49:42.000000000 -0500
+++ src/qtbase-opensource-src-5.6.2/qmake/generators/unix/unixmake.cpp	2016-10-27 23:48:25.803961800 -0500
@@ -553,11 +553,13 @@ UnixMakefileGenerator::defaultInstall(co
         bundle = project->isActiveConfig("sliced_bundle") ? SlicedBundle : SolidBundle;
     } else if(project->first("TEMPLATE") == "app") {
         target = "$(QMAKE_TARGET)";
+        if(!project->isEmpty("QMAKE_CYGWIN_EXE") && !target.endsWith(".exe"))
+            target += ".exe";
     } else if(project->first("TEMPLATE") == "lib") {
             if (!project->isActiveConfig("staticlib")
                     && !project->isActiveConfig("plugin")
                     && !project->isActiveConfig("unversioned_libname")) {
-                if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
+                if(project->isEmpty("QMAKE_HPUX_SHLIB") && project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
                     links << "$(TARGET0)" << "$(TARGET1)" << "$(TARGET2)";
                 } else {
                     links << "$(TARGET0)";
@@ -679,7 +681,10 @@ UnixMakefileGenerator::defaultInstall(co
                         link = link.right(link.length() - (lslash + 1));
                     QString dst_link = escapeFilePath(
                                 filePrefixRoot(root, fileFixify(targetdir + link, FileFixifyAbsolute)));
-                    ret += "\n\t-$(SYMLINK) $(TARGET) " + dst_link;
+                    if(!project->isEmpty("QMAKE_CYGWIN_SHLIB"))
+                        ret += "\n\t-$(INSTALL_FILE) \"" + destdir + "$(TARGET0)\" " + dst_link;
+                    else
+                        ret += "\n\t-$(SYMLINK) $(TARGET) " + dst_link;
                     if(!uninst.isEmpty())
                         uninst.append("\n\t");
                     uninst.append("-$(DEL_FILE) " + dst_link);
--- origsrc/qtbase-opensource-src-5.6.2/qmake/generators/unix/unixmake2.cpp	2016-09-16 00:49:42.000000000 -0500
+++ src/qtbase-opensource-src-5.6.2/qmake/generators/unix/unixmake2.cpp	2016-10-27 23:48:25.803961800 -0500
@@ -605,6 +605,14 @@ UnixMakefileGenerator::writeMakeParts(QT
             if(!project->isEmpty("QMAKE_POST_LINK"))
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
+        } else if(!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            t << "\n\t"
+              << "-$(DEL_FILE) $(TARGET) $(TARGET0)" << "\n\t"
+              << var("QMAKE_LINK_SHLIB_CMD") << "\n\t";
+            if(!destdir.isEmpty())
+              t  << "-$(DEL_FILE) " << destdir << "$(TARGET)\n\t"
+                 << "-$(DEL_FILE) " << destdir << "$(TARGET0)\n\t"
+                 << "-$(MOVE) $(TARGET) $(TARGET0) " << destdir;
         } else if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
             t << "\n\t";
 
@@ -1140,6 +1148,8 @@ void UnixMakefileGenerator::init2()
         }
         if(!project->isEmpty("TARGET"))
             project->values("TARGET").first().prepend(project->first("DESTDIR"));
+        if(!project->isEmpty("QMAKE_CYGWIN_EXE"))
+            project->values("TARGET").first().append(".exe");
     } else if (project->isActiveConfig("staticlib")) {
         project->values("TARGET").first().prepend(project->first("QMAKE_PREFIX_STATICLIB"));
         project->values("TARGET").first() += "." + project->first("QMAKE_EXTENSION_STATICLIB");
@@ -1167,9 +1177,10 @@ void UnixMakefileGenerator::init2()
                                                       project->first("QMAKE_FRAMEWORK_VERSION") +
                                                       bundle_loc + project->first("TARGET"));
         } else if(project->isActiveConfig("plugin")) {
-            QString prefix;
-            if(!project->isActiveConfig("no_plugin_name_prefix"))
-                prefix = "lib";
+            ProString prefix;
+            if(!project->isActiveConfig("no_plugin_name_prefix")) {
+                prefix = project->first("QMAKE_PREFIX_SHLIB");
+            }
             project->values("TARGET_x.y.z").append(prefix +
                                                         project->first("TARGET") + "." +
                                                         project->first("QMAKE_EXTENSION_PLUGIN"));
@@ -1182,6 +1193,11 @@ void UnixMakefileGenerator::init2()
                                                         project->first("QMAKE_EXTENSION_PLUGIN") +
                                                         "." + project->first("VER_MAJ"));
             project->values("TARGET") = project->values("TARGET_x.y.z");
+        } else if (!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            project->values("TARGET_").append("lib" + project->first("TARGET") + ".dll.a");
+            project->values("TARGET_x").append("cyg" + project->first("TARGET") + "-" +
+                                                    project->first("VER_MAJ") + "." + project->first("QMAKE_EXTENSION_SHLIB"));
+            project->values("TARGET") = project->values("TARGET_x");
         } else if (!project->isEmpty("QMAKE_HPUX_SHLIB")) {
             project->values("TARGET_").append("lib" + project->first("TARGET") + ".sl");
             if(project->isActiveConfig("lib_version_first"))
@@ -1312,6 +1328,8 @@ void UnixMakefileGenerator::init2()
                 project->values("QMAKE_LFLAGS") += project->values("QMAKE_LFLAGS_SONAME");
         } else {
             project->values("QMAKE_LFLAGS") += project->values("QMAKE_LFLAGS_SHLIB");
+            if(!project->isEmpty("QMAKE_CYGWIN_SHLIB"))
+                project->values("QMAKE_LFLAGS") += "-Wl,--out-implib,$(TARGET0)";
             if(!project->isEmpty("QMAKE_LFLAGS_COMPAT_VERSION")) {
                 if(project->isEmpty("COMPAT_VERSION"))
                     project->values("QMAKE_LFLAGS") += QString(project->first("QMAKE_LFLAGS_COMPAT_VERSION") +
@@ -1349,6 +1367,13 @@ UnixMakefileGenerator::libtoolFileName(b
     int dot = ret.indexOf('.');
     if(dot != -1)
         ret = ret.left(dot);
+    if(!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+        if(ret.startsWith("cyg"))
+            ret = "lib" + ret.mid(3);
+        int dash = ret.indexOf('-');
+        if(dash != -1)
+            ret = ret.left(dash);
+    }
     ret += Option::libtool_ext;
     if(!project->isEmpty("QMAKE_LIBTOOL_DESTDIR"))
         ret.prepend(project->first("QMAKE_LIBTOOL_DESTDIR") + Option::dir_sep);
@@ -1390,9 +1415,14 @@ UnixMakefileGenerator::writeLibtoolFile(
     if(project->isActiveConfig("plugin")) {
         t << fileVar("TARGET");
     } else {
-        if (project->isEmpty("QMAKE_HPUX_SHLIB"))
+        if (!project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+            t << fileVar("TARGET_");
+        } else {
+        if (project->isEmpty("QMAKE_HPUX_SHLIB")) {
             t << fileVar("TARGET_x.y.z") << ' ';
+        }
         t << fileVar("TARGET_x") << ' ' << fileVar("TARGET_");
+        }
     }
     t << "'\n\n";
 
